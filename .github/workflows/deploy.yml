name: CI/CD using github actions & docker

on:
  push:
    branches: ["main"]

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_USERNAME }}/bigtablet-homepage-server
      SHA_TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Set application.yml values
        uses: microsoft/variable-substitution@v1
        with:
          files: src/main/resources/application.yml
        env:
          spring.security.user.name: ${{ secrets.SECURITY_USER_NAME }}
          spring.security.user.password: ${{ secrets.SECURITY_USER_PASSWORD }}
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          application.jwt.secretKey: ${{ secrets.JWT_SECRET_KEY }}

      - name: Create GCP Service Account Key File
        run: |
          mkdir -p src/main/resources
          echo '${{ secrets.GCP_SERVICE_KEY }}' > src/main/resources/bigtablet-homepage-ffe77aff799f.json

      - name: chmod gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker build & push (sha + latest)
        run: |
          docker build -f Dockerfile -t $IMAGE:$SHA_TAG -t $IMAGE:latest .
          docker push $IMAGE:$SHA_TAG
          docker push $IMAGE:latest

      - name: Deploy to prod (SSH)
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: IMAGE,SHA_TAG
          script: |
            set -e
            docker rm -f bigtablet-homepage-server 2>/dev/null || true
            docker pull $IMAGE:$SHA_TAG
            docker run -d --name bigtablet-homepage-server --restart unless-stopped -p 8080:8080 $IMAGE:$SHA_TAG
            docker image prune -f || true
